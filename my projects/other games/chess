import os
import string

WHITE_BG = "\033[48;2;240;240;220m" 
BLACK_BG = "\033[48;2;120;100;80m"  
RESET = "\033[0m" 
WHITE_TEXT = "\033[38;2;255;255;255m"  
BLACK_TEXT = "\033[38;2;0;0;0m"
RED_BG = "\033[41m"

grid = [['  ' for col in range(10)]for row in range(10)]
all_pieces = set(['♜ ','♞ ','♟ ','♚ ','♛ ','♝ ','♖ ','♘ ','♙ ','♔ ','♕ ','♗ '])
black_pieces = set(['♜ ','♞ ','♟ ','♚ ','♛ ','♝ '])
white_pieces = set(['♖ ','♘ ','♙ ','♔ ','♕ ','♗ '])
b_r,b_h,b_p,b_k,b_q,b_b = '♜ ','♞ ','♟ ','♚ ','♛ ','♝ '
w_r,w_h,w_p,w_k,w_q,w_b = '♖ ','♘ ','♙ ','♔ ','♕ ','♗ '
moves = []


def print_grid():
    os.system('cls' if os.name == 'nt' else 'clear')
    print('version 2 of chess\nit is still not perfect\njust enter the row and col in the first prompt and then the new row and col ')
    for i in range(10):
        for j in range(10):
            bg_color = BLACK_BG if (i + j) % 2 == 0 else WHITE_BG  
            piece = grid[i][j]
            if i == 9 or i == 0 or j ==0 or j == 9:
                print(f"{RED_BG}{grid[i][j]}{RESET}", end="")
            elif piece in black_pieces:
                print(f"{bg_color}{BLACK_TEXT}{piece}{RESET}", end="")
            elif piece in white_pieces:
                print(f"{bg_color}{WHITE_TEXT}{piece}{RESET}", end="")
            else:  
                print(f"{bg_color}{piece}{RESET}", end="")
        print()

def start_layout():
    alphabet = list(string.ascii_uppercase)
    grid[0][0],grid[9][9],grid[9][0],grid[0][9] = '   ','   ','   ','   '
    for i in range(8):
        grid[8-i][0] = ' '+str(i+1)+ ' '
        grid[8-i][9] = ' '+str(i+1)+ ' '
        grid[0][i+1] = alphabet[i]+' '
        grid[9][i+1] = alphabet[i]+' '
    for i in range(8):
        grid[2][i+1] = b_p
        grid[7][i+1] = w_p
    grid[8][8],grid[8][1],grid[1][1],grid[1][8] = w_r,w_r,b_r,b_r
    
    grid[8][7],grid[8][2],grid[1][7],grid[1][2] = w_h,w_h,b_h,b_h
    grid[8][6],grid[8][3],grid[1][6],grid[1][3] = w_b,w_b,b_b,b_b
    grid[8][5],grid[8][4],grid[1][5],grid[1][4] = w_q,w_k,b_q,b_k

def pick_piece(turn,player):
    global moves
    alphabet = list(string.ascii_lowercase)
    while True:
        choice = input(player + ' enter letter and then number for piece to move or undo')
        if choice == 'undo':
            undo()
            break
        for letter in choice:
            if letter in alphabet:
                col = alphabet.index(letter) +1
            else:
                row = 9-int(letter)
        if grid[row][col] in turn:
            print('you have chosen '+ grid[row][col])
            choice = input(player + ' enter letter and then number for where the piece should go')
            for letter in choice:
                if letter in alphabet:
                    new_col = alphabet.index(letter) +1
                else:
                    new_row = 9-int(letter)
            try:
                if 0<new_row<=8 and 0<new_col<=8:
                    if legal(turn,row,col,new_row,new_col):
                        promotion()
                        break
            except(UnboundLocalError):
                pass
        print('illegal move')

def legal(turn,row,col,new_row,new_col):
    def check_move(turn,row,col,new_row,new_col):
        global black_castle_short,black_castle_long,white_castle_short,white_castle_long
        if grid[row][col] in (b_r,w_r,b_q,w_q):
            if row == new_row:
                if all(grid[row][c] == '  ' for c in range(min(col, new_col)+1, max(col, new_col))):
                    if grid[row][col] == b_r and col == 1:
                        black_castle_short = False
                    elif grid[row][col] == b_r and col == 8:
                        black_castle_long = False
                    elif grid[row][col] == w_r and col == 8:
                        white_castle_long = False
                    elif grid[row][col] == w_r and col == 1:
                        white_castle_short = False                    
                    return True
            elif col == new_col:
                if all(grid[r][col] == '  ' for r in range(min(row, new_row)+1, max(row, new_row))):
                    if grid[row][col] == b_r and col == 1:
                        black_castle_short = False
                    elif grid[row][col] == b_r and col == 8:
                        black_castle_long = False
                    elif grid[row][col] == w_r and col == 8:
                        white_castle_long = False
                    elif grid[row][col] == w_r and col == 1:
                        white_castle_short = False  
                    return True
                
        if grid[row][col] in (b_b,w_b,w_q,b_q):
            if abs(col - new_col) == abs(row - new_row): 
                if all(grid[r][c] == '  ' for r, c in zip(
                        range(min(row, new_row) + 1, max(row, new_row)),  
                        range(min(col, new_col) + 1, max(col, new_col)))): 
                    return True
                if all(grid[r][c] == '  ' for r, c in zip(
                        range(min(row, new_row) + 1, max(row, new_row)),  
                        range(max(col, new_col) - 1, min(col, new_col), -1))): 
                    return True
                
        elif grid[row][col] in (b_k,w_k):
            if 0<=abs(col-new_col)<=1 and 0<=abs(row-new_row)<=1:
                if turn == black_pieces:
                    black_castle_short,black_castle_long = False,False
                else:
                    white_castle_long,white_castle_short = False,False
                return True
            
        elif grid[row][col] in (b_h,w_h):
            if (abs(col-new_col) == 2 and abs(row-new_row) == 1) or (abs(col-new_col) == 1 and abs(row-new_row) == 2):
                return True
            
        elif grid[row][col] == w_p:
            if row == 7:
                if 0<row-new_row<=2 and col==new_col and grid[new_row][new_col] == '  ':
                    return True
            if row-new_row == 1 and col==new_col and grid[new_row][new_col] == '  ':
                return True
            if row-new_row == 1 and abs(col-new_col)==1 and grid[new_row][new_col] not in turn and grid[new_row][new_col] in all_pieces:
                return True
        elif grid[row][col] == b_p:
            if row == 2:
                if 0<new_row-row<=2 and col==new_col and grid[new_row][new_col] == '  ':
                    return True
            if new_row-row == 1 and col==new_col and grid[new_row][new_col] == '  ':
                return True
            if new_row-row== 1 and abs(col-new_col)==1 and grid[new_row][new_col] not in turn and grid[new_row][new_col] in all_pieces:
                return True
    def check(turn):
        for r in range(8):
            for c in range(8):
                if grid[r+1][c+1] == b_k:
                    black_r, black_c = r+1,c+1
                if grid[r+1][c+1] == w_k:
                    white_r, white_c = r+1,c+1
        for i in range(8):
            for j in range(8):
                if turn == black_pieces:
                    if grid[i+1][j+1] in white_pieces:
                        if check_move(turn,row=i+1,col=j+1,new_row=black_r , new_col=black_c):
                            return True
                if turn == white_pieces:
                    if grid[i+1][j+1] in black_pieces:
                        if check_move(turn,row=i+1,col=j+1,new_row=white_r , new_col=white_c):
                            return True
    def castle():
        global black_castle_short,black_castle_long,white_castle_short,white_castle_long
        if ((grid[row][col] == b_k and black_castle_short and new_row==row and new_col==2) or
            grid[row][col] == b_k and black_castle_long and new_row==row and new_col==6):
            black_castle_long,black_castle_short = False,False
            return True
        elif ((grid[row][col] == w_k and white_castle_short and new_row==row and new_col==2) or
            grid[row][col] == w_k and white_castle_long and new_row==row and new_col==6):
            white_castle_long,white_castle_short = False,False
            return True
    
    def checkmate():
        if turn == black_pieces:
            check_turn = white_pieces
        else:
            check_turn = black_pieces
        if check(turn = check_turn):
            for i in range(8):
                for j in range(8):
                    if grid[i+1][j+1] in check_turn:
                        for a in range(8):
                            for b in range(8):
                                if check_move(turn=check_turn,row=i+1,col=j+1,new_row=a+1,new_col=b+1) and grid[a+1][b+1] not in check_turn:
                                    moves.insert(0,(row,col,new_row,new_col,grid[new_row][new_col]))
                                    grid[a+1][b+1] = grid[i+1][j+1] 
                                    grid[i+1][j+1] = '  '
                                    if not check(turn =check_turn):
                                        undo()
                                        return False
                                    else:
                                        undo()
            return True

    if not check(turn):
        if check_move(turn,row,col,new_row,new_col):
            if grid[new_row][new_col] not in turn:
                moves.insert(0,(row,col,new_row,new_col,grid[new_row][new_col]))
                grid[new_row][new_col] = grid[row][col]
                grid[row][col] = '  '
                if checkmate():
                    print_grid()
                    print('game over checkmate')
                    exit()
                return True
        elif castle():
            if grid[new_row][new_col] == '  ':
                if all(grid[row][c] == '  ' for c in range(min(col, new_col)+1, max(col, new_col))):
                    if grid[new_row][new_col-1] in (b_r,w_r) and grid[new_row][new_col+2] in turn:
                        grid[new_row][new_col] = grid[row][col]
                        grid[row][col] = '  '
                        grid[new_row][new_col+1] = grid[new_row][new_col-1]
                        grid[new_row][new_col-1] ='  ' 
                        return True
                    elif grid[new_row][new_col+2] in (b_r,w_r) and grid[new_row][new_col+2] in turn and grid[new_row][new_col+1] == '  ':
                        grid[new_row][new_col-1] = grid[new_row][new_col+2]
                        grid[new_row][new_col+2] ='  '     
                        grid[new_row][new_col] = grid[row][col]
                        grid[row][col] = '  '  
                        return True
            print('you cannot castle')
    elif check(turn):
        if check_move(turn,row,col,new_row,new_col):
            if grid[new_row][new_col] not in turn:
                moves.insert(0,(row,col,new_row,new_col,grid[new_row][new_col]))
                grid[new_row][new_col] = grid[row][col]
                grid[row][col] = '  '
                if not check(turn):
                    return True
                else:
                    undo()
                    print('you didnt get out of check')
                    return False
    
    return False

def promotion():
    for i in range(8):
        if grid[1][i+1] == w_p:
            while True:
                piece_name = {'rook':w_r,'knight':w_h,'queen':w_q,'bishop':w_b}
                choose = input('choose one rook, knight, queen or bsihop to promote your pawn')
                if choose in piece_name:
                    grid[1][i+1] = piece_name[choose]
                    break
                else:
                    print('please write exactly as written above')
        if grid[8][i+1] == b_p:
            while True:
                piece_name = {'rook':b_r,'knight':b_h,'queen':b_q,'bishop':b_b}
                choose = input('choose one rook, knight, queen or bsihop to promote your pawn')
                if choose in piece_name:
                    grid[1][i+1] = piece_name[choose]
                    break
                else:
                    print('please write exactly as written above')

def undo():
    global moves
    row,col,new_row,new_col,piece = moves[0]
    grid[row][col] = grid[new_row][new_col]
    grid[new_row][new_col] = piece
    del moves[0]


black_castle_short,black_castle_long,white_castle_short,white_castle_long = True,True,True,True
def play():
    turn = white_pieces
    player = 'white'
    start_layout()
    print_grid()
    while True:
        pick_piece(turn,player)
        print_grid()
        if turn == white_pieces:
            turn = black_pieces
            player = 'black'
        else:
            turn = white_pieces
            player = 'white'

play()