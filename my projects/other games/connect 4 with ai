import os
import random
import copy
import time

WHITE_BG = "\033[48;2;240;240;220m" 
BROWN_BG = "\033[48;2;140;100;80m"  
RED_BG = "\033[41m"
RESET = "\033[0m" 

pieces = ['ðŸ”´ ','ðŸŸ¡ ']
white_piece = "âšª "
yellow_piece = 'ðŸŸ¡ '
red_piece = 'ðŸ”´ '

grid=[['   ' for col in range(7)]for row in range(7)]

def start_layout():
    for i in range(6):
        for j in range(7):
            grid[i][j] = white_piece
    for i in range(7):
        grid[6][i] = ' '+str(i+1)+' '

def print_grid(turn):
    if turn == red_piece: os.system('cls' if os.name == 'nt' else 'clear')
    for i in range(7):
        for j in range(7):
            if i == 6:
                print(f"{RED_BG}{grid[i][j]}{RESET}", end="")
            else:
                print(f"{WHITE_BG}{grid[i][j]}{RESET}", end="")
        print()

def choose_piece(turn):
    while True:
        try:
            col = int(input('enter a number 1-7 for the col to put your piece in'))
            col-=1
            if not 0<=col<=6:
                continue
        except (IndexError,ValueError):
            print('please just enter a number')
            continue
        if find_place(col,turn):
            break

def find_place(col,turn):
    for i in range(6):
        if grid[5-i][col] == white_piece:
            grid[5-i][col] = turn
            return True
    else:
        return False
    
def win():
    for i in range(6): #check rows
        for j in range(4):
            if grid[i][j] != white_piece:
                if all(grid[i][j+a] == grid[i][j] for a in range(4)):
                    return grid[i][j]
    for i in range(3): #check cols
        for j in range(7):
            if grid[5-i][j] != white_piece:
                if all(grid[5-i][j] == grid[5-i-a][j] for a in range(4)):
                    return grid[5-i][j]
    for i in range(3): #check diagonal /
        for j in range(4):
            if grid[5-i][j] != white_piece:
                if all(grid[5-i-a][j+a] == grid[5-i][j] for a in range(4)):
                    return grid[5-i][j]
    for i in range(3): #check diagonal \
        for j in range(4):
            if grid[5-i][6-j] != white_piece:
                if all(grid[5-i-a][6-j-a] == grid[5-i][6-j] for a in range(4)):
                    return grid[5-i][6-j]
    return None
                
def draw():
    if all(grid[i][j]!=white_piece for i in range(6)for j in range(7)):
        return True

def legal_moves():
    moves =[]
    for i in range(7):
        for j in range(6):
            if grid[5-j][i] == white_piece:
                moves.append((5-j,i))
                break
    return moves

def triples():
    yellow_triple = [white_piece,yellow_piece]
    red_triple = [red_piece,white_piece]
    ai_triples = 0
    player_triples = 0
    for i in range(6): #check rows
        for j in range(4):
            if grid[i][j] != white_piece:
                if all(grid[i][j+a] ==yellow_triple for a in range(4)):
                    if sum(1 for a in range(4) if grid[i][j+a] == yellow_piece) == 3:
                        ai_triples +=1
                if all(grid[i][j+a] ==red_triple for a in range(4)):
                    if sum(1 for a in range(4) if grid[i][j+a] == red_piece) == 3:
                        player_triples +=1
    for i in range(3): #check cols
        for j in range(7):
            if grid[5-i][j] != white_piece:
                if all(grid[5-i-a][j] ==yellow_triple for a in range(4)):
                    if sum(1 for a in range(4) if grid[5-i-a][j] == yellow_piece) == 3:
                        ai_triples +=1
                if all(grid[5-i-a][j] ==red_triple for a in range(4)):
                    if sum(1 for a in range(4) if grid[5-i-a][j] == red_piece) == 3:
                        player_triples +=1

    for i in range(3): #check diagonal /
        for j in range(4):
            if grid[5-i][j] != white_piece:
                if all(grid[5-i-a][j+a] ==yellow_triple for a in range(4)):
                    if sum(1 for a in range(4) if grid[5-i-a][j+a] == yellow_piece) == 3:
                        ai_triples +=1
                if all(grid[5-i-a][j+a] ==red_triple for a in range(4)):
                    if sum(1 for a in range(4) if grid[5-i-a][j+a] == red_piece) == 3:
                        player_triples +=1
    for i in range(3): #check diagonal \
        for j in range(4):
            if grid[5-i][6-j] != white_piece:
                if all(grid[5-i-a][6-j-a] ==yellow_triple for a in range(4)):
                    if sum(1 for a in range(4) if grid[5-i-a][6-j-a] == yellow_piece) == 3:
                        ai_triples +=1
                if all(grid[5-i-a][6-j-a] ==red_triple for a in range(4)):
                    if sum(1 for a in range(4) if grid[5-i-a][6-j-a] == red_piece) == 3:
                        player_triples +=1
    return ai_triples-player_triples

def order_moves(original,moves, turn):
    scored_moves = []
    for move in moves:
        r, c = move
        grid[r][c] = turn 
        score = evaluate() 
        grid[r][c] = original[r][c]

        scored_moves.append((score, move))

    return [move for _, move in sorted(scored_moves, reverse=(turn == yellow_piece))]
def evaluate():
    winner = win()
    if winner == red_piece: winner=-999999999999999
    elif winner == yellow_piece: winner= 9999999999999999
    else: winner = 0

    eval_triples = triples()

    centre,next_centre,next_edge,edge = [(r,3) for r in range(6)],[(r,3+c) for r in range(6)for c in [-1,1]],[(r,3+c) for r in range(6)for c in [-2,2]],[(r,3+c) for r in range(6)for c in [-3,3]]
    centre_control = sum((6 if r>=2 else 3) for r,c in centre if grid[r][c]== yellow_piece) -sum((6 if r>=2 else 3) for r,c in centre if grid[r][c]== red_piece)
    centre_control = centre_control+sum((4 if r>=2 else 2) for r,c in next_centre if grid[r][c]== yellow_piece) -sum((4 if r>=2 else 2) for r,c in next_centre if grid[r][c]== red_piece)
    centre_control = centre_control+sum((3 if r>=2 else 1) for r,c in next_edge if grid[r][c]== yellow_piece) -sum((3 if r>=2 else 1) for r,c in next_edge if grid[r][c]== red_piece)
    centre_control = centre_control+sum(1 for r,c in edge if grid[r][c]== yellow_piece) -sum(1 for r,c in edge if grid[r][c]== red_piece)

    if sum(1 for i in range(6) for j in range(7) if grid[i][j] in pieces) < 15:
        centre_control_weight = 6
    else:
        centre_control_weight = 3
    score = (
        (winner) +
        (eval_triples*20) +
        (centre_control*centre_control_weight)
    )
    return score

transposition_table = {}
def minimax(is_maximising,depth,original,alpha,beta):
    board_hash = hash(str(grid))
    if depth == 0 or win():
        score = evaluate()
        transposition_table[board_hash] = score
        return score
    moves = legal_moves()
    moves = order_moves(original,moves,turn = yellow_piece if is_maximising else red_piece) 

    if board_hash in transposition_table:
        return transposition_table[board_hash] 

    if is_maximising:
        best_score = -float('inf')  
        found_move = False
        for move in moves:
            found_move = True
            i, j = move
            grid[i][j] = yellow_piece 
            score = minimax(False,depth-1,original,alpha,beta)
            grid[i][j] = original[i][j]
            best_score = max(score, best_score) 
            alpha = max(alpha, best_score)
            if beta<=alpha:
                break
        if not found_move:  
            return evaluate()
        transposition_table[board_hash] = best_score
        return best_score

    else:
        best_score = float('inf')  
        found_move = False
        for move in moves:
            found_move = True
            i, j = move
            grid[i][j] = red_piece 
            score = minimax(True,depth-1,original,alpha,beta) 
            grid[i][j] = original[i][j]
            best_score = min(score, best_score)
            beta = min(beta, best_score)
            if beta<=alpha:
                break
        if not found_move:  
            return evaluate()
        transposition_table[board_hash] = best_score
        return best_score
    
def find_best_move(original):
    best_score = -float('inf')
    best_move = None
    moves = legal_moves()
    moves = order_moves(original,moves,turn = yellow_piece) 
    for move in moves:
        depth = 6
        i, j = move
        grid[i][j] = yellow_piece  
        score = minimax(False,depth,original,alpha=-float('inf'),beta=float('inf'))  
        grid[i][j] = original[i][j]  
        if score > best_score:  
            best_score = score
            best_move = move
    print(best_score)
    return best_move

turn = random.randint(1,2)
if turn == 1: turn=red_piece 
else: turn = yellow_piece

start_layout()
print_grid(turn)
while True:
    if turn == red_piece:
        choose_piece(turn)
        print_grid(turn)
    
    elif turn == yellow_piece:
        start_time = time.perf_counter()
        original = copy.deepcopy(grid)
        row,col = find_best_move(original)
        grid[row][col] = yellow_piece
        end_time = time.perf_counter()
        print_grid(turn)
        elapsed_time = end_time - start_time
        print(f"Time taken: {elapsed_time:.6f} seconds")
        
    if win()!= None:
        if win() == yellow_piece:
            print('well done ai wins')
            exit()
        else:
            print('well done player wins')
            exit()
    if draw():
        print('draw')
        exit()
    
    if turn == red_piece: turn = yellow_piece
    else: turn = red_piece

