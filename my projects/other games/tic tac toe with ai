import random
import os
import string

grid = [['   ' for col in range(4)]for row in range(4)]
alphabet = list(string.ascii_lowercase)
for i in range(3):
    grid[i+1][0] = ' '+str(i+1)+' '
    grid[0][i+1] = ' '+alphabet[i]+' '
    
def print_grid():
    os.system('cls' if os.name == 'nt' else 'clear')
    result = '\n----------------\n'.join('|'.join(map(str,row))for row in grid)
    print(result)

def player_pick():
    while True:
        choice = input('enter a letter and number for piece')
        if len(choice) == 2:
            for letter in choice:
                if letter in alphabet:
                    col = alphabet.index(letter)+1
                else:
                    try:
                        row = int(letter)
                    except ValueError:
                        pass
            print(row,col)
            try:
                if 1<=row<=3 and 1<=col<=3 and grid[row][col] == '   ':
                    grid[row][col] = ' O '
                    break
            except (UnboundLocalError,IndexError,ValueError):
                print('illegal choice')
                continue

def check_win():
    for i in range(3):
        if grid[i+1][1]==grid[i+1][2]==grid[i+1][3]!='   ':
            return grid[i+1][1]
        if grid[1][i+1] == grid[2][i+1]==grid[3][i+1] != '   ': 
            return grid[1][i+1]
    if grid[1][1] == grid[2][2] == grid[3][3] != '   ':
        return grid[1][1]
    if grid[1][3] == grid[2][2] == grid[3][1]!= '   ':
        return grid[1][3]
    
def draw():
    if all(grid[1+i][1+j] != '   ' for i in range(3)for j in range(3)):
        return True
    
def available_moves():
    moves = []
    for i in range(3):
        for j in range(3):
            if grid[i+1][j+1] == '   ':
                moves.append((i+1,j+1))
    return moves

def minimax(is_maximising):
    winner = check_win()
    if winner == ' X ': return 10 
    if winner == ' O ': return - 10  
    if draw(): return 0

    if is_maximising:
        best_score = -float('inf')  
        for move in available_moves():
            i, j = move
            grid[i][j] = ' X '  
            score = minimax(False)
            grid[i][j] = '   '  
            best_score = max(score, best_score) 
        return best_score

    else:
        best_score = float('inf')  
        for move in available_moves():
            i, j = move
            grid[i][j] = ' O ' 
            score = minimax(True) 
            grid[i][j] = '   ' 
            best_score = min(score, best_score)
        return best_score
    
def find_best_move():
    best_score = -float('inf')
    best_move = None

    for move in available_moves():
        i, j = move
        grid[i][j] = ' X '  
        score = minimax(False)  
        grid[i][j] = '   '  

        if score > best_score:  
            best_score = score
            best_move = move

    return best_move


turn = random.randint(1,2)
if turn == 1:
    turn = ' X '
else:
    turn = ' O '
while True:
    if turn == ' O ':
        print_grid()
        player_pick()
    elif turn == ' X ':
        row,col = find_best_move()
        grid[row][col] = ' X '
    if check_win():
        print_grid()
        print('well done '+turn+ ' wins')
        exit()
    if draw():
        print('draw')
        exit()
    if turn == ' X ':
        turn = ' O '
    else:
        turn = ' X '